open import Data.String using (String; _≟_)
open import Relation.Nullary.Decidable using (Dec; yes; no; False; toWitnessFalse; ¬?)
open import Data.Nat.Base using (ℕ; zero; suc)


Id : Set
Id = String

infix  5  ƛ_⇒_
infixl 7  _·_
infix  9  `_

data Term : Set where
  `_                      :  Id → Term
  ƛ_⇒_                    :  Id → Term → Term
  _·_                     :  Term → Term → Term



infix 9 _[_:=_]

_[_:=_] : Term → Id → Term → Term

(` x) [ y := V ] with x ≟ y
... | yes _  = V
... | no _  = ` x

(ƛ x ⇒ N) [ y := V ] with x ≟ y
... | yes _         = ƛ x ⇒ N
... | no  _         = ƛ x ⇒ N [ y := V ]

(L · M) [ y := V ]  = L [ y := V ] · M [ y := V ]

1reduction : Term → Term

1reduction ((ƛ x ⇒ M) · N) = (1reduction M) [ x := (1reduction N)]
1reduction (` x) = ` x
1reduction (M · N) = (1reduction M) · (1reduction N)
1reduction (ƛ x ⇒ M) = ƛ x ⇒ (1reduction M)

reduction : ℕ → Term → Term
reduction zero t = t
reduction (suc n) t = reduction n (1reduction t)
